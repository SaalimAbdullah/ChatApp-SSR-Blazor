@using BlazorApp5.Data
@using BlazorApp5.Models
@using BlazorApp5.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client


@inject NavigationManager NavigationManager

@inject ContactService ContactService
@inject UserService UserService
@inject ChatHubService ChatHubService
@inject ChatContextService ChatContext



<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorApp5</a>
    </div>
</div>

@if (currentUser != null)
{
    <div class="sidebar bg-light p-3" style="width: 250px; height: 100vh; overflow-y: auto;">
        <h5 class="mb-3">Contacts</h5>

        @if (userContacts == null)
        {
            <p>Loading...</p>
        }
        else if (!userContacts.Any())
        {
            <p>No contacts</p>
        }
        else
        {
            <ul class="list-group">
                @foreach (var contact in userContacts)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>
                            @contact.ContactDisplayName (@contact.ContactUserCode)
                            @if (contactsWithNewMessages.Contains(contact.ContactUserCode))
                            {
                                <span class="badge bg-danger ms-2">New</span>
                            }
                        </span>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => GoToChat(contact.ContactUserCode)">
                            Chat
                        </button>
                        <button class="btn btn-sm btn-outline-danger"
                                @onclick="() => RemoveContact(contact.ContactUserCode)">
                            Remove
                        </button>
                    </li>
                }
            </ul>
        }

        <div class="mt-4">
            <input class="form-control mb-2" placeholder="Add by code" @bind="newContactCode" maxlength="4" />
            <button class="btn btn-success w-100" @onclick="AddContact">Add Contact</button>
        </div>

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert alert-info mt-2">@statusMessage</div>
        }
    </div>

}





@code {
    private List<Contact> userContacts;
    private List<string> contactsWithNewMessages = new(); // track codes
    private string newContactCode;
    private string statusMessage;
    private ApplicationUser currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser != null)
        {
            ChatHubService.Connection.On<string, string>("ContactAdded", async (code, name) =>
            {
                Console.WriteLine($"[NavMenu] Received ContactAdded for: {code} ({name})");
                userContacts = await ContactService.GetContactsAsync(currentUser);
                InvokeAsync(StateHasChanged);

            });

            ChatHubService.Connection.On<string, string>("ReceiveMessage", (senderCode, message) =>
            {
                if (senderCode != currentUser.UserCode && !IsCurrentChatOpen(senderCode))
                {
                    if (!contactsWithNewMessages.Contains(senderCode))
                    {
                        contactsWithNewMessages.Add(senderCode);
                        InvokeAsync(StateHasChanged);
                    }
                }
            });


            await ChatHubService.EnsureConnectedAsync(currentUser.UserCode);

            userContacts = await ContactService.GetContactsAsync(currentUser);
        }
    }

    private async Task AddContact()
    {
        if (string.IsNullOrWhiteSpace(newContactCode))
        {
            statusMessage = "Enter a 4-digit code.";
            return;
        }

        var success = await ContactService.AddContactByCodeAsync(currentUser, newContactCode);
        statusMessage = success ? "Contact added!" : "Invalid code or already added.";

        if (success)
        {
            userContacts = await ContactService.GetContactsAsync(currentUser);
            newContactCode = string.Empty;
        }
    }

    private async Task RemoveContact(string contactCode)
    {
        var removed = await ContactService.RemoveContactAsync(currentUser, contactCode);
        if (removed)
        {
            userContacts = await ContactService.GetContactsAsync(currentUser);
            statusMessage = $"Removed contact {contactCode}.";
        }
        else
        {
            statusMessage = $"Failed to remove contact {contactCode}.";
        }
    }

    private void ClearNewMessageIndicator(string contactCode)
    {
        if (contactsWithNewMessages.Contains(contactCode))
        {
            contactsWithNewMessages.Remove(contactCode);
            StateHasChanged();
        }
    }

    private bool IsCurrentChatOpen(string contactCode)
    {
        return ChatContext.CurrentReceiverCode == contactCode;
    }



    private void GoToChat(string contactCode)
    {
        ClearNewMessageIndicator(contactCode);
        NavigationManager.NavigateTo($"/?receiver={contactCode}", forceLoad: true);
    }
}
