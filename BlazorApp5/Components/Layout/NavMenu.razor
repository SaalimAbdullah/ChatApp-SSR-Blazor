@using BlazorApp5.Data
@using BlazorApp5.Models
@using BlazorApp5.Services
@using Microsoft.AspNetCore.Identity

@inject NavigationManager NavigationManager

@inject ContactService ContactService
@inject UserService UserService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorApp5</a>
    </div>
</div>

<div class="sidebar bg-light p-3" style="width: 250px; height: 100vh; overflow-y: auto;">
    <h5 class="mb-3">Contacts</h5>

    @if (userContacts == null)
    {
        <p>Loading...</p>
    }
    else if (!userContacts.Any())
    {
        <p>No contacts</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var contact in userContacts)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>@contact.ContactDisplayName (@contact.ContactUserCode)</span>
                    <button class="btn btn-sm btn-outline-primary" @onclick="() => GoToChat(contact.ContactUserCode)">
                        Chat
                    </button>
                </li>
            }
        </ul>
    }

    <div class="mt-4">
        <input class="form-control mb-2" placeholder="Add by code" @bind="newContactCode" maxlength="4" />
        <button class="btn btn-success w-100" @onclick="AddContact">Add Contact</button>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info mt-2">@statusMessage</div>
    }
</div>





@code {
    private List<Contact> userContacts;
    private string newContactCode;
    private string statusMessage;
    private ApplicationUser currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserService.GetCurrentUserAsync();


        if (currentUser != null)
        {
            userContacts = await ContactService.GetContactsAsync(currentUser);
        }
    }

    private async Task AddContact()
    {
        if (string.IsNullOrWhiteSpace(newContactCode))
        {
            statusMessage = "Enter a 4-digit code.";
            return;
        }

        var success = await ContactService.AddContactByCodeAsync(currentUser, newContactCode);
        statusMessage = success ? "Contact added!" : "Invalid code or already added.";

        if (success)
        {
            userContacts = await ContactService.GetContactsAsync(currentUser);
            newContactCode = string.Empty;
        }
    }

    private void GoToChat(string contactCode)
    {
        NavigationManager.NavigateTo($"/?receiver={contactCode}", forceLoad: true);
    }
}
