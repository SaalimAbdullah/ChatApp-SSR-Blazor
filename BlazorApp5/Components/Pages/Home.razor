@page "/"
@using BlazorApp5.Data
@using BlazorApp5.Services
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@using Models
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@inject MessageService MessageService


@inject UserService UserService

<div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height: 500px;">
    @if (!userMessages.Any())
    {
        <p>No messages yet, start chatting!</p>
    }
    <h1>your code: @userCode</h1>

    @foreach (var msg in userMessages)
    {
        <div class="row mb-3 d-flex @(msg.SenderCode == userCode ? "justify-content-end" : "")">
            <div class="card shadow @(msg.SenderCode == userCode ? "color-green mr-5" : "ml-5")" style="width: 18rem;">
                <div class="card-header">
                    @(msg.SenderCode == userCode ? "You" : msg.SenderCode)
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">@msg.MessageText</li>
                </ul>
                <div class="card-footer">
                    <span class="small">@msg.SentAt.ToLocalTime().ToString("HH:mm | MMM dd")</span>
                </div>
            </div>
        </div>
    }

</div>

<div class="container">
    <div class="row">
        <input @bind="receiverCodeInput" placeholder="Chat partner's 4-digit code" maxlength="4" class="form-control" />

        <div class="col-3">
            <input @bind="usernameInput" type="text" class="form-control" placeholder="Your name" readonly="@isUserReadonly"/>
        </div>
        <div class="col-6">
            <textarea @bind="messageInput" class="form-control" placeholder="Start typing..."></textarea>
        </div>
        <div class="col-3">
            <button type="button" @onclick="Send" disabled="@(!IsConnected)" class="btn btn-primary">Send</button>
        </div>
    </div>
</div>

@code{

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Receiver { get; set; }

    private string userCode;

    private string receiverCodeInput;

    private HubConnection hubConnection;
    private List<Message> userMessages = new();
    private string usernameInput;
    private string messageInput;
    private bool isUserReadonly = false;

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;


    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetCurrentUserAsync();
        userCode = user?.UserCode;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (senderCode, message) =>
        {
            userMessages.Add(new Message
                {
                    SenderCode = senderCode,
                    ReceiverCode = userCode,
                    MessageText = message,
                    SentAt = DateTime.Now
                });

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("RegisterCode", userCode);
        isUserReadonly = true;

        if (!string.IsNullOrWhiteSpace(Receiver))
        {
            receiverCodeInput = Receiver;

            // ✅ Load history from DB
            userMessages = await MessageService.GetMessagesAsync(userCode, receiverCodeInput);
        }
    }


    private async Task Send()
    {
        if (!string.IsNullOrWhiteSpace(receiverCodeInput) &&
            !string.IsNullOrWhiteSpace(messageInput))
        {
            // Register user only once
            if (!isUserReadonly)
            {

            }

            await hubConnection.SendAsync("SendMessage", userCode, receiverCodeInput, messageInput);

   
            messageInput = string.Empty;
        }
    }



    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}