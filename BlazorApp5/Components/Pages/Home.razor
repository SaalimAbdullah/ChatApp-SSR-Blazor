@page "/"
@attribute [Authorize]

@using BlazorApp5.Data
@using BlazorApp5.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.SignalR.Client
@using Models

@inject NavigationManager NavigationManager
@inject MessageService MessageService
@inject UserService UserService
@inject ChatHubService ChatHubService
@inject ChatContextService ChatContext
@inject IJSRuntime JS


@implements IDisposable



<div @ref="chatContainer" style="height: 500px; overflow-y: auto;" class="w-100 overflow-auto shadow-sm p-3 mb-5 bg-white rounded">
    @if (string.IsNullOrWhiteSpace(receiverCodeInput))
    {
        <p class="text-muted">Click on a contact to start messaging.</p>
    }
    else if (!userMessages.Any())
    {
        <p>No messages yet, start chatting!</p>
    }
    else
    {
        <h1>your code: @userCode</h1>

        @foreach (var msg in userMessages)
        {
            <div class="row mb-3 d-flex @(msg.SenderCode == userCode ? "justify-content-end" : "")">
                <div class="card shadow @(msg.SenderCode == userCode ? "color-green mr-5" : "ml-5")" style="width: 18rem;">
                    <div class="card-header">
                        @(msg.SenderCode == userCode ? "You" : msg.SenderCode)
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">@msg.MessageText</li>
                    </ul>
                    <div class="card-footer">
                        <span class="small">@msg.SentAt.ToLocalTime().ToString("HH:mm | MMM dd")</span>
                    </div>
                </div>
            </div>
        }
    }

</div>

<div class="w-100 px-4">
    <div class="row">
        <div class="col-8">
            <textarea @bind="messageInput"
                      class="form-control"
                      placeholder="Start typing..."
                      disabled="@string.IsNullOrWhiteSpace(receiverCodeInput)">
            </textarea>
        </div>
        <div class="col-3">
            <button type="button"
                    @onclick="Send"
                    disabled="@(!IsConnected || string.IsNullOrWhiteSpace(receiverCodeInput))"
                    class="btn btn-primary">
                Send
            </button>
        </div>
    </div>
</div>


@code{

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Receiver { get; set; }

    private string userCode;

    private string receiverCodeInput;

    private ElementReference chatContainer;

    private List<Message> userMessages = new();
    private string usernameInput;
    private string messageInput;
    private bool isUserReadonly = false;

    private bool hasRendered = false;
    private bool shouldScroll = false;


    public bool IsConnected => ChatHubService?.Connection?.State == HubConnectionState.Connected;


    protected override async Task OnInitializedAsync()
    {

        var user = await UserService.GetCurrentUserAsync();
        userCode = user?.UserCode;

        ChatContext.CurrentReceiverCode = Receiver;

        ChatHubService.OnConnectionStateChanged += UpdateUI;


        ChatHubService.Connection.On<string, string>("ReceiveMessage", async (senderCode, message) =>
        {
            if (receiverCodeInput == senderCode || senderCode == userCode)
            {
                userMessages.Add(new Message
                    {
                        SenderCode = senderCode,
                        ReceiverCode = userCode,
                        MessageText = message,
                        SentAt = DateTime.Now
                    });

                shouldScroll = true;
                InvokeAsync(StateHasChanged);
            }
        });
      

        await ChatHubService.EnsureConnectedAsync(userCode);
        StateHasChanged();

        


        isUserReadonly = true;

        if (!string.IsNullOrWhiteSpace(Receiver))
        {
            receiverCodeInput = Receiver;

            userMessages = await MessageService.GetMessagesAsync(userCode, receiverCodeInput);
            shouldScroll = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            shouldScroll = true; // Scroll after initial load
        }

        if (shouldScroll && hasRendered)
        {
            shouldScroll = false;
            await ScrollToBottomAsync();
        }
    }



    private async Task Send()
    {
        if (!string.IsNullOrWhiteSpace(receiverCodeInput) &&
            !string.IsNullOrWhiteSpace(messageInput))
        {

            await ChatHubService.Connection.SendAsync("SendMessage", userCode, receiverCodeInput, messageInput);   
            messageInput = string.Empty;
            
        }
    }

    private void UpdateUI()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ChatHubService.OnConnectionStateChanged -= UpdateUI;
    }

    private async Task ScrollToBottomAsync()
    {
        await JS.InvokeVoidAsync("scrollToBottom", chatContainer);
    }




}