@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorApp5.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext


<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Username" class="form-control" autocomplete="off" placeholder="Username" />
                <label for="username">Username</label>
                <ValidationMessage For="() => Input.Username" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>

</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.UserCode = await GetNextChatCodeAsync(); // 👈 Assign the 4-digit code here
       


        await UserStore.SetUserNameAsync(user, Input.Username, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

    private async Task<string> GetNextChatCodeAsync()
    {
        var lastCode = await DbContext.Users
            .Where(u => u.UserCode != null)
            .OrderByDescending(u => u.UserCode)
            .Select(u => u.UserCode)
            .FirstOrDefaultAsync();

        int next = 1;

        if (int.TryParse(lastCode, out var parsed))
        {
            next = parsed + 1;
        }

        return next.ToString("D4"); // e.g., "0001", "0002"
    }
}
<style>
    :root {
      --primary-green: #47a248;
      --primary-dark: #1a1a1a;
      --primary-light: #f6f9f7;
      --input-bg: #2b2b2b;
      --input-border: #444;
      --error-red: #ff4c60;
      --text-light: #e6e6e6;
      --text-muted: #999;
      --shadow-color: rgba(0, 0, 0, 0.25);
    }

    body, html {
      background: linear-gradient(135deg, #1a1a1a 0%, #0f0f0f 100%);
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      color: var(--text-light);
      height: 100vh;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    h1, h2, h3 {
      font-weight: 600;
      color: var(--primary-green);
      letter-spacing: 0.05em;
    }

    h1 {
      font-size: 2.75rem;
      margin-bottom: 1rem;
    }

    h2 {
      font-size: 1.75rem;
      margin-bottom: 1.5rem;
    }

    h3 {
      font-size: 1.25rem;
      margin-bottom: 1rem;
      color: var(--text-muted);
    }

    .row {
      display: flex;
      flex-wrap: wrap;
      max-width: 900px;
      width: 100%;
      gap: 2rem;
      background-color: #121212;
      border-radius: 12px;
      box-shadow: 0 12px 25px var(--shadow-color);
      padding: 2rem 3rem;
    }

    .col-md-4 {
      flex: 1 1 35%;
      min-width: 320px;
    }

    .col-md-6 {
      flex: 1 1 55%;
      min-width: 320px;
      color: var(--text-light);
    }

    form {
      display: flex;
      flex-direction: column;
    }

    .form-floating {
      position: relative;
      margin-bottom: 1.8rem;
    }

    .form-floating input.form-control {
      width: 100%;
      background-color: var(--input-bg);
      border: 1.8px solid var(--input-border);
      border-radius: 10px;
      padding: 1.25rem 1rem 0.5rem 1rem;
      font-size: 1rem;
      color: var(--text-light);
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-floating input.form-control::placeholder {
      color: transparent;
    }

    .form-floating input.form-control:focus {
      outline: none;
      border-color: var(--primary-green);
      box-shadow: 0 0 8px var(--primary-green);
      background-color: #222;
    }

    .form-floating label {
      position: absolute;
      top: 1.25rem;
      left: 1rem;
      color: var(--text-muted);
      font-size: 1rem;
      pointer-events: none;
      transition: all 0.3s ease;
    }

    .form-floating input.form-control:focus + label,
    .form-floating input.form-control:not(:placeholder-shown) + label {
      top: 0.3rem;
      font-size: 0.8rem;
      color: var(--primary-green);
      font-weight: 600;
      background-color: #121212;
      padding: 0 0.25rem;
      border-radius: 5px;
    }

    .text-danger {
      color: var(--error-red);
      font-size: 0.85rem;
      margin-top: 0.25rem;
      font-weight: 500;
    }

    button.btn-primary {
      background: linear-gradient(90deg, #3fb054 0%, #47a248 100%);
      border: none;
      padding: 1rem;
      font-size: 1.15rem;
      border-radius: 12px;
      color: white;
      font-weight: 700;
      cursor: pointer;
      transition: background 0.4s ease;
      box-shadow: 0 4px 15px rgba(71, 162, 72, 0.6);
    }

    button.btn-primary:hover,
    button.btn-primary:focus {
      background: linear-gradient(90deg, #2a7a33 0%, #3b8c3d 100%);
      box-shadow: 0 6px 20px rgba(42, 122, 51, 0.75);
      outline: none;
    }

    .status-message {
      margin-bottom: 1rem;
      font-weight: 700;
      color: var(--error-red);
      background-color: #3f1a1a;
      padding: 0.8rem 1rem;
      border-radius: 8px;
      box-shadow: 0 0 10px var(--error-red);
    }

    section {
      background-color: #1f1f1f;
      padding: 1.5rem 2rem;
      border-radius: 12px;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.7);
      color: var(--text-light);
    }

    hr {
      border: none;
      border-top: 1px solid #333;
      margin: 1rem 0 1.5rem 0;
    }

    /* Responsive */
    </style>